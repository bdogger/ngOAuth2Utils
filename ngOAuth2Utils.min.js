/*! ngOAuth2Utils 2015-12-02 */
"use strict";!function(){angular.module("ngOAuth2Utils",["ngStorage","ngRoute"]).constant("oauthConfig",{getAccessTokenUrl:"",base64BasicKey:"",revokeTokenUrl:"",loginPath:"/login",loginSuccessPath:"",interceptorIgnorePattern:/ /,loginErrorMessage:"",loginFunction:null,forgotPasswordURL:null,logoutSuccessMessage:"",storageType:"session",useRouting:!0,unsecuredPaths:[]}).config(function(a,b){b.useRouting&&a.when("/login",{controller:"LoginCtrl",templateUrl:"oauth2Templates/login.html"}).when("/logout",{controller:"LogoutCtrl",template:"<logout-message></logout-message>"})}).config(["$httpProvider",function(a){a.interceptors.push("$httpInterceptorService")}]).run(function(a,b,c,d,e){b.isValidAndExpiredToken()?c.refresh():c.allowAnonymous(a.path())||b.isValidToken()||a.path(e.loginPath),d.$on("$routeChangeStart",function(e,f){c.allowAnonymous(f.originalPath)||b.isValidToken()||d.$evalAsync(function(){a.path("/login")})})}),angular.module("ngOAuth2Utils").controller("LoginCtrl",function(a,b,c,d){a.login=function(e){a.loginError=null,c.login(e.username,e.password).then(function(){b.path(d.loginSuccessPath),d.loginFunction&&d.loginFunction()},function(b){a.loginError=b.data[d.loginErrorMessage]})},d.forgotPasswordURL&&(a.forgotPasswordURL=d.forgotPasswordURL)}),angular.module("ngOAuth2Utils").controller("LogoutCtrl",function(a,b,c,d,e){b.logout().then(function(b){a.logoutSuccess=b.data[e.logoutSuccessMessage]}),d.getStorage().$reset({}),c.reset()}),angular.module("ngOAuth2Utils").directive("loginForm",function(){return{restrict:"E",templateUrl:"oauth2Templates/loginform.html"}}),angular.module("ngOAuth2Utils").directive("logoutMessage",function(){return{restrict:"E",template:'<div class="alert alert-success" id="logout-message">You have successfully logged out.</div>'}}),angular.module("ngOAuth2Utils").directive("requireAuthenticated",function(a){return{restrict:"A",link:function(b,c){b.$watch(function(){return a.isValidToken()},function(){a.isValidToken()?c.removeClass("hidden"):c.addClass("hidden")})}}}),angular.module("ngOAuth2Utils").directive("requireUnauthenticated",function(a){return{restrict:"A",link:function(b,c){b.$watch(function(){return a.isValidToken()},function(){a.isValidToken()?c.addClass("hidden"):c.removeClass("hidden")})}}}),angular.module("ngOAuth2Utils").run(["$templateCache",function(a){a.put("oauth2Templates/login.html",'<div class="row">\n    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2"></div>\n    <div class="col-lg-8 col-sm-8 col-md-8 col-xs-8">\n        <login-form></login-form>\n        <div ng-if="forgotPasswordURL">\n            <a id="forgot-password-link" class="btn btn-warning" href="{{forgotPasswordURL}}"><span\n                    class="fa fa-question-circle"></span> Forgot/Lost Password</a>\n            <br/>\n        </div>\n    </div>\n    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2"></div>\n</div>\n</div>\n'),a.put("oauth2Templates/loginform.html",'<div>\n    <div class="alert alert-danger login-error" id="login-error" ng-if="loginError">{{loginError}}</div>\n    <form name="loginForm" novalidate ng-submit="login(loginDetails)">\n        <div class="form-group">\n            <input name="username" id="username" class="form-control" type="text" placeholder="username"\n                   ng-model="loginDetails.username"\n                   required/>\n        </div>\n        <div class="form-group">\n            <input name="password" id="password" class="form-control" type="password" placeholder="password"\n                   ng-model="loginDetails.password" required/>\n        </div>\n        <div class="form-group">\n            <button type="submit" class="btn btn-primary btn-block login-button" ng-disabled="loginForm.$invalid">\n                Login <span class="glyphicon glyphicon-user"></span>\n            </button>\n        </div>\n    </form>\n</div>')}]),angular.module("ngOAuth2Utils").factory("$authenticationService",function(a,b,c){function d(a){b.setToken(a.access_token),b.setExpiresIn(a.expires_in),b.setRefreshToken(a.refresh_token)}return{allowAnonymous:function(a){return a.split("/").length>2?a="/"+a.split("/")[1]:a.split("?").length>1&&(a=a.split("?")[0]),c.forgotPasswordURL===a||c.unsecuredPaths.indexOf(a)>-1},login:function(e,f){return a({method:"POST",url:c.getAccessTokenUrl,headers:{Authorization:"Basic "+c.base64BasicKey},data:{grant_type:"password",password:f,username:e}}).success(function(a){d(a)}).error(function(){b.reset()})},refresh:function(){return a({method:"POST",url:c.getAccessTokenUrl,headers:{Authorization:"Basic "+c.base64BasicKey},data:{refresh_token:b.getRefreshToken(),grant_type:"refresh_token"}}).success(function(a){d(a)})},logout:function(){return a({method:"DELETE",url:c.revokeTokenUrl,headers:{Authorization:"Bearer "+b.getToken()}}).success(function(){b.reset()})}}}),angular.module("ngOAuth2Utils").factory("$httpInterceptorService",function(a,b,c,d){return{request:function(a){return a.url.match(d.interceptorIgnorePattern)||null==c.getToken()||(a.headers.Authorization="Bearer "+c.getToken()),a},responseError:function(e){return(401===e.status||400===e.status&&e.config.data&&e.config.data.grant_type&&"refresh_token"===e.config.data.grant_type)&&(c.reset(),b.path(d.loginPath)),a.reject(e)}}}),angular.module("ngOAuth2Utils").factory("storageService",function(a,b,c){return{getStorage:function(){return"local"===c.storageType?b:a}}}),angular.module("ngOAuth2Utils").factory("$tokenService",function(a){return{getToken:function(){return a.getStorage().token},setToken:function(b){a.getStorage().token=b},setExpiresIn:function(b){a.getStorage().expiresIn=new Date((new Date).valueOf()+1e3*b)},isValidToken:function(){return null==this.getToken()||null==a.getStorage().expiresIn||a.getStorage().expiresIn.valueOf()<(new Date).valueOf()?!1:!0},isValidAndExpiredToken:function(){return null!=this.getToken()&&null!=this.getRefreshToken()&&null!=a.getStorage().expiresIn&&(new Date).valueOf()<a.getStorage().expiresIn.valueOf()?!0:!1},setRefreshToken:function(b){a.getStorage().refreshToken=b},getRefreshToken:function(){return a.getStorage().refreshToken},reset:function(){this.setToken(null),this.setRefreshToken(null),a.getStorage().expiresIn=null}}})}();